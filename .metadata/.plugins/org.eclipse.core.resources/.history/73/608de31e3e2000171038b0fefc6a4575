package com.hebe.matris;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.SocketException;
import java.nio.ByteBuffer;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;

public class MessageSocket {

	private DatagramSocket socket;
	
	private ConcurrentLinkedQueue<DatagramPacket> inbox = new ConcurrentLinkedQueue<>();

	private ConcurrentLinkedQueue<DatagramPacket> outbox = new ConcurrentLinkedQueue<>();
	
	private ConcurrentHashMap<MessageSocketListener, Boolean> listeners = new ConcurrentHashMap<>();

	private Thread readingThread = new Thread(new Runnable() {

		public void run() {

			while (true) {

				read();
			}
		}
	});

	private Thread writingThread = new Thread(new Runnable() {

		public void run() {

			while (true) {

				write();
			}
		}
	});

	private Thread dispatchingThread = new Thread(new Runnable() {

		public void run() {

			while (true) {

				dispatch();
			}
		}
	});

	public MessageSocket(int port) throws SocketException {

		socket = new DatagramSocket(port);
		
		readingThread.start();
		writingThread.start();
		dispatchingThread.start();
	}

	public void addListener(MessageSocketListener listener) {
		
		listeners.putIfAbsent(listener, true);
	}
	
	private void read() {

		try {
			
			socket.receive(new DatagramPacket(new byte[Message.SIZE], Message.SIZE));
			
		} catch (IOException e) {
			
			e.printStackTrace();
		}
	}

	private void dispatch() {

		if (inbox.isEmpty()) {

			sleepSilent(100);

		} else {

			DatagramPacket packet = inbox.poll();

			if (packet != null) {

				try {
					
					Message message = Message.fromBytes(packet.getData());
					
					for(MessageSocketListener listener : listeners.keySet()) {
						
						listener.onMessage(message);
					}
					
				} catch (ClassNotFoundException e1 | IOException e2) {
					
					e.printStackTrace();
				}
			}
		}
	}

	private void write() {

		if(outbox.isEmpty()) {
			
			sleepSilent(100);
			
		} else {

			DatagramPacket packet = outbox.poll();
			
			if(packet != null) {
				
				try {
					
					socket.send(packet);
					
				} catch (IOException e) {
					
					e.printStackTrace();
				}
			}
		}
	}
	
	private void sleepSilent(long ms) {
		
		try {

			Thread.sleep(100);

		} catch (InterruptedException e) {

			// nothing to do
		}
	}
}
