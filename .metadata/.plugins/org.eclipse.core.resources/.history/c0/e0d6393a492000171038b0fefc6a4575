package matris.coordinator;

import java.net.InetSocketAddress;
import java.util.HashMap;
import java.util.concurrent.ConcurrentHashMap;

import matris.messagesocket.MessageSocket;

public class WorkerWatcher {

	private Thread watchingThread = new Thread(new Runnable() {

		public void run() {

			while (true) {

				watch();
			}
		}
	}, "watching thread");

	private HashMap<InetSocketAddress, Boolean> workers;

	private MessageSocket socket;

	private ConcurrentHashMap<InetSocketAddress, Long> lastPingTimes = new ConcurrentHashMap<>();

	public WorkerWatcher(HashMap<InetSocketAddress, Boolean> workers, MessageSocket socket) {

		this.workers = workers;
		this.socket = socket;

		// reset timers
		for (InetSocketAddress worker : workers.keySet()) {

			lastPingTimes.put(worker, System.currentTimeMillis());
		}

		watchingThread.start();
	}

	private void watch() {

		// ping
		// reset timers
		for (InetSocketAddress worker : workers.keySet()) {

			lastPingTimes.put(worker, System.currentTimeMillis());
		}

		try {

			Thread.sleep(1000);

		} catch (InterruptedException e) {

			e.printStackTrace();
		}

	}
}
